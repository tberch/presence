name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: ${{ github.repository }}/audio-app-api
  KUBE_NAMESPACE: audio-app

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mongodb:
        image: mongo:6
        env:
          MONGO_INITDB_ROOT_USERNAME: mongodb
          MONGO_INITDB_ROOT_PASSWORD: mongodb
          MONGO_INITDB_DATABASE: test_db
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --quiet --eval 'db.runCommand({ping:1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libsndfile1
        
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        MONGODB_URL: mongodb://mongodb:mongodb@localhost:27017/test_db?authSource=admin
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET: test_jwt_secret
        ENV: test
      run: |
        pytest --cov=app --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set Kubernetes context
      uses: azure/k8s-set-context@v3
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
        
    - name: Deploy to Kubernetes
      env:
        DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
        IMAGE_TAG: ${{ github.sha }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
      run: |
        # Create namespace if it doesn't exist
        kubectl create namespace $KUBE_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
        # Create secrets
        envsubst < k8s/secrets.yaml | kubectl apply -n $KUBE_NAMESPACE -f -
        
        # Apply ConfigMap
        kubectl apply -n $KUBE_NAMESPACE -f k8s/configmap.yaml
        
        # Deploy databases
        kubectl apply -n $KUBE_NAMESPACE -f k8s/databases.yaml
        
        # Deploy backend services
        envsubst < k8s/deployment.yaml | kubectl apply -n $KUBE_NAMESPACE -f -
        envsubst < k8s/worker.yaml | kubectl apply -n $KUBE_NAMESPACE -f -
        
        # Deploy HPA
        kubectl apply -n $KUBE_NAMESPACE -f k8s/hpa.yaml
        
        # Deploy Ingress
        kubectl apply -n $KUBE_NAMESPACE -f k8s/ingress.yaml
        
    - name: Verify deployment
      run: |
        kubectl -n $KUBE_NAMESPACE rollout status deployment/audio-app-api
        kubectl -n $KUBE_NAMESPACE rollout status deployment/audio-app-worker
